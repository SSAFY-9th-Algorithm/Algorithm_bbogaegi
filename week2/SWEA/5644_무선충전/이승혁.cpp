// ### 미해결 문제 ###// ### 미해결 문제 ###// ### 미해결 문제 ###// ### 미해결 문제 ###// ### 미해결 문제 ###// ### 미해결 문제 ###
// ### 미해결 문제 ###// ### 미해결 문제 ###// ### 미해결 문제 ###// ### 미해결 문제 ###// ### 미해결 문제 ###// ### 미해결 문제 ###
// ### 미해결 문제 ###// ### 미해결 문제 ###// ### 미해결 문제 ###// ### 미해결 문제 ###// ### 미해결 문제 ###// ### 미해결 문제 ###
// ### 미해결 문제 ###// ### 미해결 문제 ###// ### 미해결 문제 ###// ### 미해결 문제 ###// ### 미해결 문제 ###// ### 미해결 문제 ###
// ### 미해결 문제 ###// ### 미해결 문제 ###// ### 미해결 문제 ###// ### 미해결 문제 ###// ### 미해결 문제 ###// ### 미해결 문제 ###
// ### 미해결 문제 ###// ### 미해결 문제 ###// ### 미해결 문제 ###// ### 미해결 문제 ###// ### 미해결 문제 ###// ### 미해결 문제 ###


// 각 충전기 위치에서 flood fill 
// 맵에 충전기의 번호를 나타낸다

0 2 0 1 0 0 0 0
2 2 1/2 1 1 0 0 0
2 2 2 1/2 0 0 0 0
2 2 2 1 0 0 0 0
0 2 0 0 3 0 0 0
0 0 0 3 3 3 0 0
0 0 3 3 3 3 3 0
  
// 범위가 겹치는 녀석들을 확인할 수 없다.
// move 방향대로 각 캐릭터를 이동하며 if map[ny][nx]!=0 , sum1+=BC[map[ny1][nx1]] , sum2=BC[map[ny2][nx2]] 를 구현하고
// if ny1==ny2 && nx2==ny22 둘이 같이있다면, 어떤게 더 효율적일까 확인
// 각 인원이 이용 가능한 개수 비교(어떻게?
// 개수가같을때? 둘다 한개? 둘ㄷ 다 두개?-> A가 1번, B가 2번, B가 1번 A가 1번 
// 한 명 한 개, 한 명 두 개 .. 아 이렇게 하는게 맞나 이렇게 조건이 많아지면 점점 잘못 설계하고 있다는 생각이
// 위에서 시작을 잘못했기에 점차 해야할 게 많아지는 느낌?
  
  // 눈이 슬슬 감기고.. 정리할게 많아서 주말에 풀어보는 걸로..
  // 해결 방안은 내일 조금 더 생각해보고 조언을 구하던
